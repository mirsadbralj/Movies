// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Application;

#nullable disable

namespace Movies.Application.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    partial class MoviesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movies.Core.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brad Pitt"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Denzel Washington"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adam Sandler"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leonardo DiCaprio"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nicolas Cage"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morgan Freeman"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Penelope Cruz"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Julia Roberts"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sandra Bullock"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jennifer Aniston"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angelina Jolie"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Emma Stone"
                        });
                });

            modelBuilder.Entity("Movies.Core.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CoverImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movies.Core.Entities.MovieCast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCast");
                });

            modelBuilder.Entity("Movies.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Movies.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Movies.Core.Entities.MovieCast", b =>
                {
                    b.HasOne("Movies.Core.Entities.Actor", "Actor")
                        .WithMany("Cast")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Core.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movies.Core.Entities.Rating", b =>
                {
                    b.HasOne("Movies.Core.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movies.Core.Entities.Actor", b =>
                {
                    b.Navigation("Cast");
                });

            modelBuilder.Entity("Movies.Core.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Movies.Core.Entities.User", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
